def mutator(x: int, exes: list[int]) -> int:
    """an impure function..."""
    x += 1
    exes[0] += 1
    y: int = x + 1
    print(f"mutator x: {x}, exes: {exes}, y: {y}")
    return x


x: int = 0
exes: list[int] = [0]
y: int = 0
print(f"global before x: {x}, exes: {exes}, y: {y}")
y = mutator(x, exes) + 2  # would return 1 (1+ 2=3)
print(f"global after x: {x}, exes: {exes}, y: {y}")


def loopy(foods: list[str]) -> list[str]:
    index = len(foods) - 1
    while index >= 0:
        print(foods[index])
        foods.pop(index)
        index -= 2
    foods.append("papaya")
    return foods


# example usage
words = ["apple", "banana", "cherry", "date"]
print(words)
loopy(words)
print(words)


# More list practice
def combine(ayes: list[int], bees: list[int]) -> list[int]:
    """add the items of two lists item-wise"""
    assert len(ayes) == len(bees)
    idx: int = 0
    result: list[int] = []  # intializing list with literal format
    while idx < len(ayes):
        result.append(ayes[idx] + bees[idx])
        idx += 1
    return result


odds: list[int] = [1, 3, 5]
evens: list[int] = [2, 4, 6]
totals: list[int] = combine(odds, evens)
print(totals)


# Function writing question from practice quiz
def reverse(regular: list[str]) -> list[str]:
    """Returns the reverse of a list"""
    reversed: list[str] = []
    idx: int = 2
    while idx <= len(regular) and idx >= 0:
        reversed.append(regular[idx])
        idx -= 1
    return reversed


original: list[str] = ["T", "A", "C"]
print(reverse(original))


def reverse(regular: list[str]) -> list[str]:
    """Returns the reverse of a list"""
    reversed: list[str] = []
    idx: int = 2
    while idx <= len(regular) and idx >= 0:
        reversed.append(regular[idx])
        idx -= 1
    return reversed


original: list[str] = ["Well", "Am", "I"]
print(reverse(original))


# Memory Diagram from Practice Quiz


def sum2d(xs: list[list[int]]) -> int:
    """Calculate the sum of a 2-dimensional list of lists."""
    total: int = 0
    row_i: int = 0
    while row_i < len(xs):
        col_i: int = 0
        while col_i < len(xs[row_i]):
            total += xs[row_i][col_i]
            col_i += 1
        row_i += 1
    return total


values: list[list[int]] = [[1, 2, 3], [3, 4, 5], [7, 8, 9]]
print(sum2d(values))


def mul_table(height: int, width: int) -> list[list[int]]:
    """Gnerate a multuplication table."""
    table: list[list[int]] = []
    row_idx: int = 1
    while row_idx <= height:
        col_idx: int = 1
        row: list[int] = []
        while col_idx <= width:
            row.append(row_idx * col_idx)
            col_idx += 1
        table.append(row)
        row_idx += 1
    return table


print(mul_table(3, 3))
print(len(""))


def sort(xs: list[int]) -> None:
    """Sort with the insertion algorithm"""
    N: int = len(xs)
    idx: int = 1
    x: int
    si: int

    while idx < N:
        print(xs)
        x = xs[idx]
        si = idx
        while si > 0 and x < xs[si - 1]:
            xs[si] = xs[si - 1]
            si -= 1
        xs[si] = x
        idx += 1


values: list[int] = [40, 10, 30, 20]
sort(values)
print(values)


def sum2d(xs: list[list[int]]) -> int:
    """Calculate the sum of a two dimensional list"""
    total: int = 0
    row_i: int = 0
    while row_i < len(xs):
        col_i: int = 0
        while col_i < len(xs[row_i]):
            total += xs[row_i][col_i]
            col_i += 1
        row_i += 1
    return total


values: list[list[int]] = [[1, 2, 3], [3, 4, 5]]


numbers: list[str] = ["B", "A", "D", "C"]


fruits: list[str] = ["apples", "grapes", "oranges"]
print(fruits)
# If we want to switch the values at index 2 and 0
temp: str = fruits[0]
fruits[0] = fruits[2]  # we want to store the value that will be lost
fruits[2] = temp
print(fruits)


def reverse(original: list[str]) -> list[str]:
    """Reverses a list"""
    idx: int = len(original) - 1
    reversed: list[int] = (
        []
    )  # Need to declare and intialize an empty list to append the values to from original
    while idx <= len(original) and idx >= 0:
        reversed.append(original[idx])
        idx = idx - 1
    return reversed  # returning the list with the reversed values of original


a: list[str] = ["Hello", "Hi"]
print(reverse(a))


a = [1, 2, 3]
b = a
b.append(4)
print(a)


def multiply_elements(grid: list[list[int]], factor: int) -> None:
    """Multiplies each element in a 2D list by a given factor."""
    row: int = 0
    while row < len(grid):  # Loop through rows
        col: int = 0
        while col < len(grid[row]):  # Loop through columns
            grid[row][col] = grid[row][col] * factor
            col += 1  # Move to the next column
        row += 1  # Move to the next row
    return None


# Example usage:
matrix: list[list[int]] = [[1, 2, 3], [4, 5, 6]]
print(f"Before: {matrix}")
multiply_elements(matrix, 2)
print(f"After: {matrix}")

animals: list[str] = ["fox", "bear", "rabbit"]
print(animals)
temp: str = animals[1]
animals[1] = animals[2]
animals[2] = temp
print(animals)
